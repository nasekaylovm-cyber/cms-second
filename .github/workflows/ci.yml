name: Secure CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Этап 1: SAST - Статический анализ безопасности
  sast:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pylint pip-audit
        mkdir -p reports
        
    - name: Run Bandit SAST
      run: |
        bandit -r . -f json -o reports/bandit-report.json || true
      continue-on-error: true
      
    - name: Run Safety check
      run: |
        safety check --json --output reports/safety-report.json || true
      continue-on-error: true
      
    - name: Run Pylint
      run: |
        pylint **/*.py --output-format=json:reports/pylint-report.json || true
      continue-on-error: true
      
    - name: Upload SAST reports
      uses: actions/upload-artifact@v3
      with:
        name: sast-reports
        path: reports/
        
  # Этап 2: Проверка секретов
  secrets-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Detect secrets with Gitleaks
      uses: gitleaks/gitleaks-action@v2.3.0
      with:
        config-path: .gitleaks.toml
        report-format: json
        report-path: gitleaks-report.json
        
    - name: Upload secrets report
      uses: actions/upload-artifact@v3
      with:
        name: secrets-report
        path: gitleaks-report.json
      continue-on-error: true
      
  # Этап 3: Сканирование зависимостей
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Scan Python dependencies
      run: |
        mkdir -p reports
        pip-audit --format json --output reports/pip-audit-report.json || true
        safety check --json --output reports/safety-report-deps.json || true
        
    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-reports
        path: reports/
      continue-on-error: true
        
  # Этап 4: Проверка конфигураций
  config-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check YAML files
      run: |
        pip install yamllint
        if find . -name "*.yml" -o -name "*.yaml" | grep -q .; then
          yamllint . -f formatted || true
        else
          echo "No YAML files found"
        fi
        
    - name: Check JSON files
      run: |
        if find . -name "*.json" | grep -q .; then
          pip install jsonlint-php
          find . -name "*.json" -exec jsonlint {} \; || true
        else
          echo "No JSON files found"
        fi
        
    - name: Check Dockerfile
      run: |
        if [ -f "Dockerfile" ]; then
          echo "Dockerfile found, checking syntax..."
          # Используем hadolint через Docker правильно
          docker run --rm -i hadolint/hadolint < Dockerfile || true
        else
          echo "No Dockerfile found"
        fi
        
  # Этап 5: Сборка проекта
  build:
    runs-on: ubuntu-latest
    needs: [sast, secrets-scan, dependency-scan]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        # Проверяем существование тестов и запускаем если есть
        if [ -f "setup.py" ]; then
          python setup.py test || echo "Tests failed but continuing"
        elif [ -d "tests" ]; then
          python -m pytest tests/ -v || echo "Tests failed but continuing"
        else
          echo "No tests found, skipping test execution"
        fi
      continue-on-error: true
        
    - name: Build package
      run: |
        if [ -f "setup.py" ]; then
          python setup.py sdist bdist_wheel
          echo "Build completed successfully"
        else
          echo "No setup.py found, skipping build"
        fi
        
  # Этап 6: Деплой на сервер
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: 5.129.250.92
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /var/www/cms
          git fetch origin
          git reset --hard origin/main
          pip3 install -r requirements.txt
          systemctl daemon-reload
          systemctl restart cms
          echo "Deployment completed successfully"
          
  # Этап 7: DAST - Динамический анализ безопасности
  dast:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://5.129.250.92'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: Upload DAST report
      uses: actions/upload-artifact@v3
      with:
        name: dast-report
        path: zap-report.html
      continue-on-error: true
        
  # Финальный этап: Сводный отчет
  summary:
    runs-on: ubuntu-latest
    needs: [sast, secrets-scan, dependency-scan, config-scan, build, dast]
    if: always()
    steps:
    - name: Security Summary
      run: |
        echo "=== SECURITY SCAN SUMMARY ==="
        echo "SAST: ${{ needs.sast.result }}"
        echo "Secrets Scan: ${{ needs.secrets-scan.result }}"
        echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
        echo "Config Scan: ${{ needs.config-scan.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "DAST: ${{ needs.dast.result }}"
        echo "============================="
